name: Release Documentation

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'minor'
        type: choice
        options: [patch, minor, major]
      release_type:
        description: 'Release type'
        required: false
        default: 'release'
        type: choice
        options: [release, prerelease]

permissions:
  contents: write
  pull-requests: read

env:
  NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
  NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # A. Setup (3 steps)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js and Bun
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      # B. Version Management (2 steps)
      - name: Configure Git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Bump version and capture output
        id: version_bump
        run: |
          npm version ${{ github.event.inputs.bump_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_number=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: v$NEW_VERSION"

      # C. Build & Generate Assets (3 steps)
      - name: Build Docusaurus
        run: bun run build

      - name: Start local server for PDF generation
        run: |
          bun run serve --port 3000 --host 0.0.0.0 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          # Wait for server to start
          echo "Waiting for server to start..."
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 2; done'
          echo "Server is ready"

      - name: Generate PDF documentation
        run: |
          # Install Prince XML for PDF generation
          curl -O https://www.princexml.com/download/prince_15.4-1_ubuntu20.04_amd64.deb
          sudo dpkg -i prince_15.4-1_ubuntu20.04_amd64.deb || sudo apt-get install -f -y

          # Generate PDF using the existing script
          bun run gen-pdf

          # Rename PDF to include version
          if [ -f "pdf/docs.pdf" ]; then
            mv pdf/docs.pdf comapeo-docs-english-${{ steps.version_bump.outputs.version_number }}.pdf
          elif [ -f "docs.pdf" ]; then
            mv docs.pdf comapeo-docs-english-${{ steps.version_bump.outputs.version_number }}.pdf
          else
            echo "PDF file not found, checking current directory..."
            ls -la
            # Try to find any PDF files
            find . -name "*.pdf" -type f
          fi

          # Stop the server
          kill $SERVER_PID || true

      # D. Docusaurus & Notion Updates (2 steps)
      - name: Create Docusaurus version
        run: |
          npm run docusaurus docs:version ${{ steps.version_bump.outputs.version_number }}
          echo "Created Docusaurus version: ${{ steps.version_bump.outputs.version_number }}"

      - name: Update Notion database
        run: |
          if [ -n "${{ secrets.NOTION_TOKEN }}" ] && [ -n "${{ secrets.NOTION_DATABASE_ID }}" ]; then
            bun run notion:version
            echo "Updated Notion database with new version"
          else
            echo "Notion credentials not available, skipping Notion update"
          fi
        continue-on-error: true

      # E. Git & Release (2 steps)
      - name: Commit changes and create tag
        run: |
          # Add all changes
          git add .

          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "chore: release v${{ steps.version_bump.outputs.version_number }}

            - Bump version to ${{ steps.version_bump.outputs.version_number }}
            - Create Docusaurus version
            - Update documentation

            Generated by Awana Digital ü§ñ
          else
            echo "No changes to commit"
          fi

          # Create and push tag
          git tag ${{ steps.version_bump.outputs.new_version }}
          git push origin main
          git push origin ${{ steps.version_bump.outputs.new_version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version_bump.outputs.new_version }}
          name: Release ${{ steps.version_bump.outputs.new_version }}
          generate_release_notes: true
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
          files: |
            comapeo-docs-english-${{ steps.version_bump.outputs.version_number }}.pdf
          body: |
            ## üìö Documentation Release ${{ steps.version_bump.outputs.new_version }}

            This release includes:
            - üìÑ Updated documentation (PDF attached)
            - üîÑ New Docusaurus version created
            - üóÑÔ∏è Notion database updated

            ### üì• Downloads
            - [üìÑ Documentation PDF](./comapeo-docs-english-${{ steps.version_bump.outputs.version_number }}.pdf)

            ---
            ü§ñ *This release was created automatically by the release workflow*

      - name: Cleanup
        if: always()
        run: |
          # Clean up any background processes
          pkill -f "docusaurus serve" || true
          # Clean up temporary files
          rm -f prince_15.4-1_ubuntu20.04_amd64.deb || true